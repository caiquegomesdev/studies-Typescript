Classes
Classes em TypeScript são construções fundamentais da programação orientada a objetos (POO) que permitem criar objetos com propriedades e comportamentos relacionados. Elas servem como modelos ou moldes para criar instâncias de objetos específicos.

Uma classe é definida usando a palavra-chave class seguida pelo nome da classe. Dentro da classe, você pode declarar propriedades, métodos e construtores. As propriedades representam os dados associados à classe e os métodos definem as ações que a classe pode realizar.

Aqui está um exemplo básico de uma classe em TypeScript:



class Pessoa {
  nome: string;
  idade: number;
 
  constructor(nome: string, idade: number) {
    this.nome = nome;
    this.idade = idade;
  }
 
  apresentar(): void {
    console.log(`Olá, meu nome é ${this.nome} e tenho ${this.idade} anos.`);
  }
}


No exemplo acima, definimos uma classe Pessoa com duas propriedades (nome e idade), um construtor que recebe argumentos para inicializar as propriedades e um método apresentar() que imprime uma mensagem no console.

Para criar uma instância (objeto) da classe, usamos o operador new seguido pelo nome da classe e, se necessário, passamos os argumentos exigidos pelo construtor:



const pessoa1 = new Pessoa("João", 25);
pessoa1.apresentar(); // Saída: "Olá, meu nome é João e tenho 25 anos."


As classes também podem ter métodos estáticos e propriedades estáticas, que são compartilhados entre todas as instâncias da classe. Além disso, as classes podem herdar de outras classes usando a palavra-chave extends para criar hierarquias de classes.

As classes em TypeScript fornecem uma maneira poderosa de modelar objetos e estruturar o código de forma orientada a objetos. Elas promovem a reutilização de código, encapsulamento de dados e modularidade. Com a tipagem estática do TypeScript, é possível detectar erros de tipo relacionados às classes durante a fase de desenvolvimento, garantindo um código mais robusto e seguro.